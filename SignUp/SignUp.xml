<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignUp</name>
    </assembly>
    <members>
        <member name="T:SignUp.Controllers.DataController">
            <summary>
            Controller to handle json data between client and server
            </summary>
        </member>
        <member name="M:SignUp.Controllers.DataController.#ctor(Microsoft.Extensions.Logging.ILogger{SignUp.Controllers.DataController})">
            <summary>
            Logger
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:SignUp.Controllers.DataController.CreateClient(SignUp.Models.CreateClientWizardData)">
            <summary>
            Accept Data from the client app, process, call service to send post and return response, return response to client
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:SignUp.Models.ClientPostResponseData">
            <summary>
            Data Returned in the response from posting a Client
            </summary>
        </member>
        <member name="T:SignUp.Models.CreateClientWizardData">
            <summary>
            Data sent from the client app (the state)
            </summary>
        </member>
        <member name="T:SignUp.Models.Domain.HttpVerb">
            <summary>
            GET -     The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. (This is also true of some other HTTP methods.)[1] The W3C has published guidance principles on this distinction, saying, "Web application design should be informed by the above principles, but also by the relevant limitations."[26] See safe methods below.
            HEAD -    The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.
            POST -    The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI. The data POSTed might be, for example, an annotation for existing resources; a message for a bulletin board, newsgroup, mailing list, or comment thread; a block of data that is the result of submitting a web form to a data-handling process; or an item to add to a database.
            PUT -     The PUT method requests that the enclosed entity be stored under the supplied URI. If the URI refers to an already existing resource, it is modified; if the URI does not point to an existing resource, then the server can create the resource with that URI.
            DELETE -  The DELETE method deletes the specified resource.
            TRACE  -  The TRACE method echoes the received request so that a client can see what (if any) changes or additions have been made by intermediate servers.
            OPTIONS - The OPTIONS method returns the HTTP methods that the server supports for the specified URL. This can be used to check the functionality of a web server by requesting '*' instead of a specific resource.
            CONNECT - The CONNECT method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.[30][31] See HTTP CONNECT method.
            PATCH  -  The PATCH method applies partial modifications to a resource.
            </summary>
        </member>
        <member name="T:SignUp.Models.Domain.WebDAVVerbs">
            <summary>
            WebDAV extends the set of standard HTTP verbs and headers allowed for request methods. The added verbs include:
            ******
            COPY - copy a resource from one URI to another
            LOCK - put a lock on a resource.WebDAV supports both shared and exclusive locks.
            MKCOL - create collections(a.k.a.a directory)
            MOVE - move a resource from one URI to another
            PROPFIND - retrieve properties, stored as XML, from a web resource.It is also overloaded to allow one to retrieve the collection structure (also known as directory hierarchy) of a remote system.
            PROPPATCH -change and delete multiple properties on a resource in a single atomic act
            UNLOCK - remove a lock from a resource
            </summary>
        </member>
        <member name="P:SignUp.Models.UNMS.ClientPost.RegistrationDate">
            <summary>
            Date string in ISO 8601
            </summary>
        </member>
        <member name="T:SignUp.Models.UNMS.PlanPeriodMonhs">
            <summary>
            Service Plan Period In Months
            </summary>
        </member>
        <member name="T:SignUp.Models.UNMS.ClientType">
            <summary>
            Client Type
            </summary>
        </member>
        <member name="T:SignUp.Models.UNMS.JobStatus">
            <summary>
            Job Status
            </summary>
        </member>
        <member name="M:SignUp.Services.UNMSDataService.GetServicePlans">
            <summary>
            Get A List Of Service-Plans from the API
            </summary>
        </member>
        <member name="M:SignUp.Services.UNMSDataService.GetProducts">
            <summary>
            Get A List of Products from the API
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignUp.Services.UNMSDataService.GetSurcharges">
            <summary>
            Get A List of Surcharges from the API
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignUp.Services.UNMSDataService.PostClientLead(SignUp.Models.UNMS.ClientPost)">
            <summary>
            Post a Client as A Lead
            </summary>
        </member>
        <member name="P:SignUp.ViewModels.ClientTypeViewModel.ClientType">
            <summary>
            Person | Company
            </summary>
        </member>
        <member name="P:SignUp.ViewModels.RouterOptionViewModel.RouterOption">
            <summary>
            Buy | Lease
            </summary>
        </member>
        <member name="P:SignUp.ViewModels.AntennaOptionViewModel.Option">
            <summary>
            Buy | Lease
            </summary>
        </member>
    </members>
</doc>
